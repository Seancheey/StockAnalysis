// source: proto/Stock.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Stock', null, global);
goog.exportSymbol('proto.StockDailySummary', null, global);
goog.exportSymbol('proto.StockHistDailySummaries', null, global);
goog.exportSymbol('proto.StockPoint', null, global);
goog.exportSymbol('proto.StockPoints', null, global);
goog.exportSymbol('proto.StocksResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Stock = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Stock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Stock.displayName = 'proto.Stock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StocksResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StocksResponse.repeatedFields_, null);
};
goog.inherits(proto.StocksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StocksResponse.displayName = 'proto.StocksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockDailySummary = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StockDailySummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StockDailySummary.displayName = 'proto.StockDailySummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockHistDailySummaries = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StockHistDailySummaries.repeatedFields_, null);
};
goog.inherits(proto.StockHistDailySummaries, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StockHistDailySummaries.displayName = 'proto.StockHistDailySummaries';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockPoint = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StockPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StockPoint.displayName = 'proto.StockPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockPoints = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StockPoints.repeatedFields_, null);
};
goog.inherits(proto.StockPoints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StockPoints.displayName = 'proto.StockPoints';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Stock.prototype.toObject = function (opt_includeInstance) {
    return proto.Stock.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Stock} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Stock.toObject = function (includeInstance, msg) {
    var f, obj = {
      exchange: jspb.Message.getFieldWithDefault(msg, 1, ""),
      code: jspb.Message.getFieldWithDefault(msg, 2, ""),
      fullName: jspb.Message.getFieldWithDefault(msg, 3, ""),
      industry: jspb.Message.getFieldWithDefault(msg, 4, ""),
      area: jspb.Message.getFieldWithDefault(msg, 5, ""),
      listDate: jspb.Message.getFieldWithDefault(msg, 6, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Stock}
 */
proto.Stock.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Stock;
  return proto.Stock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Stock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Stock}
 */
proto.Stock.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setExchange(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setCode(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setFullName(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setIndustry(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setArea(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setListDate(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Stock.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Stock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Stock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Stock.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getExchange();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFullName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIndustry();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getArea();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getListDate();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * optional string exchange = 1;
 * @return {string}
 */
proto.Stock.prototype.getExchange = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Stock.prototype.setExchange = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.Stock.prototype.getCode = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Stock.prototype.setCode = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string full_name = 3;
 * @return {string}
 */
proto.Stock.prototype.getFullName = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Stock.prototype.setFullName = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string industry = 4;
 * @return {string}
 */
proto.Stock.prototype.getIndustry = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Stock.prototype.setIndustry = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string area = 5;
 * @return {string}
 */
proto.Stock.prototype.getArea = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Stock.prototype.setArea = function (value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 list_date = 6;
 * @return {number}
 */
proto.Stock.prototype.getListDate = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Stock.prototype.setListDate = function (value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StocksResponse.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StocksResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.StocksResponse.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StocksResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StocksResponse.toObject = function (includeInstance, msg) {
    var f, obj = {
      stocksList: jspb.Message.toObjectList(msg.getStocksList(),
        proto.Stock.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StocksResponse}
 */
proto.StocksResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StocksResponse;
  return proto.StocksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StocksResponse}
 */
proto.StocksResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Stock;
        reader.readMessage(value, proto.Stock.deserializeBinaryFromReader);
        msg.addStocks(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StocksResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.StocksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StocksResponse.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Stock.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Stock stocks = 1;
 * @return {!Array<!proto.Stock>}
 */
proto.StocksResponse.prototype.getStocksList = function () {
  return /** @type{!Array<!proto.Stock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Stock, 1));
};


/** @param {!Array<!proto.Stock>} value */
proto.StocksResponse.prototype.setStocksList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Stock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Stock}
 */
proto.StocksResponse.prototype.addStocks = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Stock, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.StocksResponse.prototype.clearStocksList = function () {
  this.setStocksList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StockDailySummary.prototype.toObject = function (opt_includeInstance) {
    return proto.StockDailySummary.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StockDailySummary} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StockDailySummary.toObject = function (includeInstance, msg) {
    var f, obj = {
      date: jspb.Message.getFieldWithDefault(msg, 1, 0),
      open: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
      close: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
      high: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
      low: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
      lastDayClose: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
      volume: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
      turnover: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockDailySummary}
 */
proto.StockDailySummary.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockDailySummary;
  return proto.StockDailySummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockDailySummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockDailySummary}
 */
proto.StockDailySummary.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt64());
        msg.setDate(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setOpen(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setClose(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setHigh(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setLow(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setLastDayClose(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setVolume(value);
        break;
      case 8:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setTurnover(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockDailySummary.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.StockDailySummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockDailySummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockDailySummary.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getClose();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getLow();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getLastDayClose();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getTurnover();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional int64 date = 1;
 * @return {number}
 */
proto.StockDailySummary.prototype.getDate = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.StockDailySummary.prototype.setDate = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double open = 2;
 * @return {number}
 */
proto.StockDailySummary.prototype.getOpen = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.StockDailySummary.prototype.setOpen = function (value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double close = 3;
 * @return {number}
 */
proto.StockDailySummary.prototype.getClose = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.StockDailySummary.prototype.setClose = function (value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double high = 4;
 * @return {number}
 */
proto.StockDailySummary.prototype.getHigh = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.StockDailySummary.prototype.setHigh = function (value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double low = 5;
 * @return {number}
 */
proto.StockDailySummary.prototype.getLow = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.StockDailySummary.prototype.setLow = function (value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double last_day_close = 6;
 * @return {number}
 */
proto.StockDailySummary.prototype.getLastDayClose = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.StockDailySummary.prototype.setLastDayClose = function (value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double volume = 7;
 * @return {number}
 */
proto.StockDailySummary.prototype.getVolume = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.StockDailySummary.prototype.setVolume = function (value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double turnover = 8;
 * @return {number}
 */
proto.StockDailySummary.prototype.getTurnover = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.StockDailySummary.prototype.setTurnover = function (value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StockHistDailySummaries.repeatedFields_ = [2];


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StockHistDailySummaries.prototype.toObject = function (opt_includeInstance) {
    return proto.StockHistDailySummaries.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StockHistDailySummaries} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StockHistDailySummaries.toObject = function (includeInstance, msg) {
    var f, obj = {
      stock: (f = msg.getStock()) && proto.Stock.toObject(includeInstance, f),
      dailySummaryList: jspb.Message.toObjectList(msg.getDailySummaryList(),
        proto.StockDailySummary.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockHistDailySummaries}
 */
proto.StockHistDailySummaries.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockHistDailySummaries;
  return proto.StockHistDailySummaries.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockHistDailySummaries} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockHistDailySummaries}
 */
proto.StockHistDailySummaries.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Stock;
        reader.readMessage(value, proto.Stock.deserializeBinaryFromReader);
        msg.setStock(value);
        break;
      case 2:
        var value = new proto.StockDailySummary;
        reader.readMessage(value, proto.StockDailySummary.deserializeBinaryFromReader);
        msg.addDailySummary(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockHistDailySummaries.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.StockHistDailySummaries.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockHistDailySummaries} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockHistDailySummaries.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Stock.serializeBinaryToWriter
    );
  }
  f = message.getDailySummaryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.StockDailySummary.serializeBinaryToWriter
    );
  }
};


/**
 * optional Stock stock = 1;
 * @return {?proto.Stock}
 */
proto.StockHistDailySummaries.prototype.getStock = function () {
  return /** @type{?proto.Stock} */ (
    jspb.Message.getWrapperField(this, proto.Stock, 1));
};


/** @param {?proto.Stock|undefined} value */
proto.StockHistDailySummaries.prototype.setStock = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.StockHistDailySummaries.prototype.clearStock = function () {
  this.setStock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.StockHistDailySummaries.prototype.hasStock = function () {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated StockDailySummary daily_summary = 2;
 * @return {!Array<!proto.StockDailySummary>}
 */
proto.StockHistDailySummaries.prototype.getDailySummaryList = function () {
  return /** @type{!Array<!proto.StockDailySummary>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.StockDailySummary, 2));
};


/** @param {!Array<!proto.StockDailySummary>} value */
proto.StockHistDailySummaries.prototype.setDailySummaryList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.StockDailySummary=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StockDailySummary}
 */
proto.StockHistDailySummaries.prototype.addDailySummary = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.StockDailySummary, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.StockHistDailySummaries.prototype.clearDailySummaryList = function () {
  this.setDailySummaryList([]);
};


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StockPoint.prototype.toObject = function (opt_includeInstance) {
    return proto.StockPoint.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StockPoint} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StockPoint.toObject = function (includeInstance, msg) {
    var f, obj = {
      stockIndex: jspb.Message.getFieldWithDefault(msg, 1, 0),
      stockPrice: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockPoint}
 */
proto.StockPoint.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockPoint;
  return proto.StockPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockPoint}
 */
proto.StockPoint.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readInt32());
        msg.setStockIndex(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readDouble());
        msg.setStockPrice(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockPoint.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.StockPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockPoint.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStockIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStockPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional int32 stock_index = 1;
 * @return {number}
 */
proto.StockPoint.prototype.getStockIndex = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.StockPoint.prototype.setStockIndex = function (value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double stock_price = 2;
 * @return {number}
 */
proto.StockPoint.prototype.getStockPrice = function () {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.StockPoint.prototype.setStockPrice = function (value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StockPoints.repeatedFields_ = [1];


if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.StockPoints.prototype.toObject = function (opt_includeInstance) {
    return proto.StockPoints.toObject(opt_includeInstance, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.StockPoints} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.StockPoints.toObject = function (includeInstance, msg) {
    var f, obj = {
      stockPointsList: jspb.Message.toObjectList(msg.getStockPointsList(),
        proto.StockPoint.toObject, includeInstance)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockPoints}
 */
proto.StockPoints.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockPoints;
  return proto.StockPoints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockPoints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockPoints}
 */
proto.StockPoints.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.StockPoint;
        reader.readMessage(value, proto.StockPoint.deserializeBinaryFromReader);
        msg.addStockPoints(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockPoints.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.StockPoints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockPoints} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockPoints.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getStockPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.StockPoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated StockPoint stock_points = 1;
 * @return {!Array<!proto.StockPoint>}
 */
proto.StockPoints.prototype.getStockPointsList = function () {
  return /** @type{!Array<!proto.StockPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.StockPoint, 1));
};


/** @param {!Array<!proto.StockPoint>} value */
proto.StockPoints.prototype.setStockPointsList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.StockPoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StockPoint}
 */
proto.StockPoints.prototype.addStockPoints = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.StockPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.StockPoints.prototype.clearStockPointsList = function () {
  this.setStockPointsList([]);
};


goog.object.extend(exports, proto);
